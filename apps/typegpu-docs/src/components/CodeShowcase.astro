---
import CodeButton from "./CodeButton.astro";
import CodePen from "./CodePen.astro";
import as_a_foundation from "../assets/hero/as_a_foundation.svg";
import as_a_puzzle_piece from "../assets/hero/as_a_puzzle_piece.svg";
import for_libraries from "../assets/hero/for_libraries.svg";

const sectionId = "interactive-code-section";
---

{/* Code Section */}
<div class="flex flex-col" id={sectionId}>
    {/* buttons */}
    <div
        class="relative -mx-4 w-[calc(100%+4rem)] self-center sm:static sm:mx-0 sm:w-full"
    >
        <div
            class="horizontal-scroll flex gap-4 overflow-x-auto px-6 pb-2 sm:grid sm:grid-cols-3 sm:overflow-visible sm:px-0"
        >
            <div
                class="opacity-60 hover:opacity-100 transition-opacity duration-200 ease-in-out cursor-pointer code-button-wrapper flex-shrink-0 w-72 sm:w-auto"
            >
                <CodeButton
                    title="As a foundation"
                    message="TypeGPU smooths out the tough parts of WebGPU without boxing you in."
                    icon={for_libraries}
                />
            </div>
            <div
                class="opacity-60 hover:opacity-100 transition-opacity duration-200 ease-in-out cursor-pointer code-button-wrapper flex-shrink-0 w-72 sm:w-auto"
            >
                <CodeButton
                    title="As a puzzle piece"
                    message="Pick and choose the APIs, then plug them into your code however you want."
                    icon={as_a_puzzle_piece}
                />
            </div>
            <div
                class="opacity-60 hover:opacity-100 transition-opacity duration-200 ease-in-out cursor-pointer code-button-wrapper flex-shrink-0 w-72 sm:w-auto"
            >
                <CodeButton
                    title="For libraries"
                    message="Simplify library internals, and make your user-facing API type-safe by default."
                    icon={as_a_foundation}
                />
            </div>
        </div>
    </div>

    {/* CodePen */}
    <div class="relative w-full codepen-container">
        <CodePen
            code={`export interface TgpuComputePipeline
  extends TgpuNamable, SelfResolvable, Timeable {
  readonly [$internal]: ComputePipelineInternals;
  readonly resourceType: 'compute-pipeline';

  with(
    bindGroupLayout: TgpuBindGroupLayout,
    bindGroup: TgpuBindGroup,
  ): TgpuComputePipeline;

  dispatchWorkgroups(
    x: number,
    y?: number | undefined,
    z?: number | undefined,
  ): void;
}

export function INTERNAL_createComputePipeline(
  branch: ExperimentalTgpuRoot,
  slotBindings: [TgpuSlot<unknown>, unknown][],
  entryFn: TgpuComputeFn,
) {
  return new TgpuComputePipelineImpl(
    new ComputePipelineCore(branch, slotBindings, entryFn),
    {},
  );
}`}
            language="typescript"
        />
        <CodePen
            code={`export function INTERNAL_createComputePipeline(
    branch: ExperimentalTgpuRoot,
    slotBindings: [TgpuSlot<unknown>, unknown][],
    entryFn: TgpuComputeFn,
  ) {
    return new TgpuComputePipelineImpl(
      new ComputePipelineCore(branch, slotBindings, entryFn),
      {},
    );
    export interface TgpuComputePipeline
    extends TgpuNamable, SelfResolvable, Timeable {
    readonly [$internal]: ComputePipelineInternals;
    readonly resourceType: 'compute-pipeline';


  with(
    bindGroupLayout: TgpuBindGroupLayout,
    bindGroup: TgpuBindGroup,
  ): TgpuComputePipeline;

  dispatchWorkgroups(
    x: number,
    y?: number | undefined,
    z?: number | undefined,
  ): void;
}

}`}
            language="typescript"
        />
        <CodePen
            code={`// Create a buffer with a specific data type
export function INTERNAL_createComputePipeline(
    branch: ExperimentalTgpuRoot,
    slotBindings: [TgpuSlot<unknown>, unknown][],
    entryFn: TgpuComputeFn,
  ) {
    return new TgpuComputePipelineImpl(
      new ComputePipelineCore(branch, slotBindings, entryFn),
      {},
    );
    with(
        bindGroupLayout: TgpuBindGroupLayout,
        bindGroup: TgpuBindGroup,
        ): TgpuComputePipeline;
        
        dispatchWorkgroups(
      x: number,
      y?: number | undefined,
      z?: number | undefined,
    ): void;
    export interface TgpuComputePipeline
    extends TgpuNamable, SelfResolvable, Timeable {
    readonly [$internal]: ComputePipelineInternals;
    readonly resourceType: 'compute-pipeline';


}

      }`}
            language="typescript"
        />
    </div>
</div>

<style>
    .horizontal-scroll {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .horizontal-scroll::-webkit-scrollbar {
        display: none;
    }
</style>

<script define:vars={{ sectionId }}>
    const section = document.getElementById(sectionId);

    const buttons = Array.from(
        section.querySelectorAll(".code-button-wrapper"),
    );
    const codePens = Array.from(
        section.querySelectorAll(".codepen-container > *"),
    );

    function showContent(indexToShow) {
        buttons.forEach((button, index) => {
            if (button instanceof HTMLElement) {
                button.classList.toggle("opacity-100", index === indexToShow);
                button.classList.toggle("opacity-60", index !== indexToShow);
            }
        });

        codePens.forEach((pen, index) => {
            if (pen instanceof HTMLElement) {
                pen.style.display = index === indexToShow ? "block" : "none";
            }
        });
    }

    buttons.forEach((button, index) => {
        button.addEventListener("click", () => showContent(index));
    });
    showContent(0);
</script>
