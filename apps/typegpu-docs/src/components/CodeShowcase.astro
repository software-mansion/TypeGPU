---
import CodeButton from "./CodeButton.astro";
import CodePen from "./CodePen.astro";
import as_a_foundation from "../assets/hero/as_a_foundation.svg";
import as_a_puzzle_piece from "../assets/hero/as_a_puzzle_piece.svg";
import for_libraries from "../assets/hero/for_libraries.svg";

const sectionId = "interactive-code-section";
---

{/* Code Section */}
<div class="flex flex-col" id={sectionId}>
    <div class="mb-12">
        {/* Section Title */}
        <h2 class="font-normal text-blue-950 text-4xl center">
            Ways to use TypeGPU
        </h2>
        <p class="text-blue-900 text-2xl text-pretty">
            TypeGPU is a three-way toolkit that is easy for you to integrate
            granularly and doesn't restrict you in what you can do.
        </p>
    </div>
    {/* buttons */}
    <div class="self-center gap-4 grid grid-cols-3">
        <div
            class="opacity-60 hover:opacity-100 transition-opacity duration-200 ease-in-out cursor-pointer code-button-wrapper"
        >
            <CodeButton
                title="As a foundation"
                message="TypeGPU smooths out the tough parts of WebGPU without boxing you in."
                icon={for_libraries}
            />
        </div>
        <div
            class="opacity-60 hover:opacity-100 transition-opacity duration-200 ease-in-out cursor-pointer code-button-wrapper"
        >
            <CodeButton
                title="As a puzzle piece"
                message="Pick and choose the APIs you need, and plug them into your code however you want."
                icon={as_a_puzzle_piece}
            />
        </div>
        <div
            class="opacity-60 hover:opacity-100 transition-opacity duration-200 ease-in-out cursor-pointer code-button-wrapper"
        >
            <CodeButton
                title="For libraries"
                message="Simplify library internals, and make your user-facing API type-safe by default."
                icon={as_a_foundation}
            />
        </div>
    </div>

    {/* CodePen */}
    <div class="relative px-4 w-full codepen-container">
        <CodePen
            code={`export interface TgpuComputePipeline
  extends TgpuNamable, SelfResolvable, Timeable {
  readonly [$internal]: ComputePipelineInternals;
  readonly resourceType: 'compute-pipeline';

  with(
    bindGroupLayout: TgpuBindGroupLayout,
    bindGroup: TgpuBindGroup,
  ): TgpuComputePipeline;

  dispatchWorkgroups(
    x: number,
    y?: number | undefined,
    z?: number | undefined,
  ): void;
}

export function INTERNAL_createComputePipeline(
  branch: ExperimentalTgpuRoot,
  slotBindings: [TgpuSlot<unknown>, unknown][],
  entryFn: TgpuComputeFn,
) {
  return new TgpuComputePipelineImpl(
    new ComputePipelineCore(branch, slotBindings, entryFn),
    {},
  );
}`}
            language="typescript"
        />
        <CodePen
            code={`// Define a compute function with typed parameters
const computeFn = tgpu.computeFunction(
  (data: tgpu.Buffer<Float32Array>, factor: number) => {
    // WGSL code using 'data' and 'factor'
  }
);
}`}
            language="typescript"
        />
        <CodePen
            code={`// Create a buffer with a specific data type
const buffer = tgpu.buffer(new Float32Array([1.0, 2.0
, 3.0]));
// The buffer is now typed as TgpuBuffer<Float32Array>
const bindGroupLayout = tgpu.bindGroupLayout({
  myBuffer: tgpu.binding(tgpu.BindingType.StorageBuffer, tgpu.ShaderStage.Compute),
  mySampler: tgpu.binding(tgpu.BindingType.Sampler, tgpu.ShaderStage.Compute),
});
      }`}
            language="typescript"
        />
    </div>
</div>

<script define:vars={{ sectionId }}>
    const section = document.getElementById(sectionId);

    const buttons = Array.from(
        section.querySelectorAll(".code-button-wrapper"),
    );
    const codePens = Array.from(
        section.querySelectorAll(".codepen-container > *"),
    );

    function showContent(indexToShow) {
        buttons.forEach((button, index) => {
            if (button instanceof HTMLElement) {
                button.classList.toggle("opacity-100", index === indexToShow);
                button.classList.toggle("opacity-60", index !== indexToShow);
            }
        });

        codePens.forEach((pen, index) => {
            if (pen instanceof HTMLElement) {
                pen.style.display = index === indexToShow ? "block" : "none";
            }
        });
    }

    buttons.forEach((button, index) => {
        button.addEventListener("click", () => showContent(index));
    });
    showContent(0);
</script>
