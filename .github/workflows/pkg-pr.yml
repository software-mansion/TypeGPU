name: Publish PR package (pkg.pr.new)

on: [pull_request]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4

      - name: Print commit id, message and tag
        run: |
          git show -s --format='%h %s'
          echo "github.ref -> {{ github.ref }}"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --recursive --frozen-lockfile

      - name: Nightly build
        run: pnpm nightly-build

      - name: Publish (pkg.pr.new)
        run: npx pkg-pr-new publish './packages/typegpu/dist' --json output.json --comment=off
      - name: Post or update comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const output = JSON.parse(fs.readFileSync('output.json', 'utf8'));

            const sha =
              context.event_name === 'pull_request'
                ? context.payload.pull_request.head.sha
                : context.payload.after;

            const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${sha}`;

            const body = `**pkg.pr.new**

            *packages*
            \`\`\`
            pnpm i https://pkg.pr.new/software-mansion/TypeGPU/typegpu@${context.issue.number}
            ${output.packages
              .map((p) => `pnpm i ${p.url}`)
              .join('\n')}
            \`\`\`

            *benchmark*
            [view benchmark](https://docs.swmansion.com/TypeGPU/benchmark?p=npm-latest_pr-${context.issue.number})

            *commit*
            [view commit](${commitUrl})`;

            const botCommentIdentifier = '**pkg.pr.new**';

            async function findBotComment(issueNumber) {
              if (!issueNumber) return null;
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              return comments.data.find((comment) =>
                comment.body.includes(botCommentIdentifier)
              );
            }

            async function createOrUpdateComment(issueNumber) {
              if (!issueNumber) {
                console.log('No issue number provided. Cannot post or update comment.');
                return;
              }

              const existingComment = await findBotComment(issueNumber);
              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: body,
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body,
                });
              }
            }

            async function logPublishInfo() {
              console.log('\n' + '='.repeat(50));
              console.log('Publish Information');
              console.log('='.repeat(50));
              console.log('\nPublished Packages:');
              console.log(packages);
              console.log('\nTemplates:');
              console.log(templates);
              console.log(`\nCommit URL: ${commitUrl}`);
              console.log('\n' + '='.repeat(50));
            }

            if (context.eventName === 'pull_request') {
              if (context.issue.number) {
                await createOrUpdateComment(context.issue.number);
              }
            } else if (context.eventName === 'push') {
              const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.ref.replace(
                  'refs/heads/',
                  ''
                )}`,
              });

              if (pullRequests.data.length > 0) {
                await createOrUpdateComment(pullRequests.data[0].number);
              } else {
                console.log(
                  'No open pull request found for this push. Logging publish information to console:'
                );
                await logPublishInfo();
              }
            }
